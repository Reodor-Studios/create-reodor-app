/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./../types/database.types";

export const PriorityLevelSchema = z.union([
  z.literal("low"),
  z.literal("medium"),
  z.literal("high"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.string(), z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const ProfilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  created_at: z.string(),
  email: z.string(),
  full_name: z.string().nullable(),
  id: z.string(),
  updated_at: z.string(),
});

export const ProfilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  email: z.string(),
  full_name: z.string().optional().nullable(),
  id: z.string(),
  updated_at: z.string().optional(),
});

export const ProfilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  email: z.string().optional(),
  full_name: z.string().optional().nullable(),
  id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const TodosRowSchema = z.object({
  completed: z.boolean(),
  created_at: z.string(),
  description: z.string().nullable(),
  due_date: z.string().nullable(),
  id: z.string(),
  priority: PriorityLevelSchema.nullable(),
  title: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const TodosInsertSchema = z.object({
  completed: z.boolean().optional(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  due_date: z.string().optional().nullable(),
  id: z.string().optional(),
  priority: PriorityLevelSchema.optional().nullable(),
  title: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const TodosUpdateSchema = z.object({
  completed: z.boolean().optional(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  due_date: z.string().optional().nullable(),
  id: z.string().optional(),
  priority: PriorityLevelSchema.optional().nullable(),
  title: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const TodosRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("todos_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);
